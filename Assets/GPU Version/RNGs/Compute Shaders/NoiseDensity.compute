/*
	Author: Gus Tahara-Edmonds
	Date: Summer 2019
	Purpose: Uses a bunch of math to create a smoothed 3D noise. This is summed up at different amplitude/frequencies to produce
	the appearance of terrain. Could be customized a lot more to get more realistic worlds. Right now it just makes either floating	
	islands or caves. 
	Note: I used a lot of the math from a project I found online and have since lost reference to it. If this is your code 
	let me know and I'll credit you.
*/

#pragma kernel Evaluate

struct NoiseOctave {
	float frequency; 
	float amplitude;
	float3 offset;
};

float globalScale;
StructuredBuffer<NoiseOctave> noiseOctaves;
int length;
float3 worldPos;
uint pointsPerAxis;
float scale;

RWTexture3D<float> densityData;

float3 random3(float3 c) {
	float j = 4096.0*sin(dot(c, float3(17.0, 59.4, 15.0)));
	float3 r;
	r.z = frac(512.0*j);
	j *= .125;
	r.x = frac(512.0*j);
	j *= .125;
	r.y = frac(512.0*j);
	return r - 0.5;
}

//function for generating a singular random value at specific point in world space
//the result is simplex3D noise
float simplex3d(float3 p) {
	float F3 = 0.333333;
	float G3 = 0.166667;

	/* 1. find current tetrahedron T and it's four vertices */
	/* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */
	/* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/

	/* calculate s and x */
	float3 s = floor(p + dot(p, float3(F3, F3, F3)));
	float3 x = p - s + dot(s, float3(G3, G3, G3));

	/* calculate i1 and i2 */
	float3 e = step(float3(0, 0, 0), x - x.yzx);
	float3 i1 = e * (1.0 - e.zxy);
	float3 i2 = 1.0 - e.zxy*(1.0 - e);

	/* x1, x2, x3 */
	float3 x1 = x - i1 + G3;
	float3 x2 = x - i2 + 2.0 * G3;
	float3 x3 = x - 1.0 + 3.0 * G3;

	/* 2. find four surflets and store them in d */
	float4 w, d;

	/* calculate surflet weights */
	w.x = dot(x, x);
	w.y = dot(x1, x1);
	w.z = dot(x2, x2);
	w.w = dot(x3, x3);

	/* w fades from 0.6 at the center of the surflet to 0.0 at the margin */
	w = max(0.6 - w, 0.0);

	/* calculate surflet components */
	d.x = dot(random3(s), x);
	d.y = dot(random3(s + i1), x1);
	d.z = dot(random3(s + i2), x2);
	d.w = dot(random3(s + 1.0), x3);

	/* multiply d by w^4 */
	w *= w;
	w *= w;
	d *= w;

	/* 3. return the sum of the four surflets */
	return dot(d, float4(52, 52, 52, 52));
}

//adds up noise values at different frequencies/amplitudes to create a more interesting look
float sumOctaves(float3 id) {
	float value = 0;
	for (int i = 0; i < length; i++) {
		NoiseOctave curOctave = noiseOctaves[i];
		value += curOctave.amplitude * simplex3d((id + curOctave.offset + worldPos) * curOctave.frequency / globalScale);
	}

	value /= length;
	return value;
}

[numthreads(8,8,8)]
void Evaluate (uint3 id : SV_DispatchThreadID) {
	if (id.x >= pointsPerAxis || id.y >= pointsPerAxis || id.z >= pointsPerAxis) {
		return;
	}

	densityData[id] = sumOctaves(float3(id) * scale);
}
